package com.blogs;

import org.modelmapper.Conditions;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	@Bean // equivalent to <bean id ..../> in xml file
	public ModelMapper mapper() {
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT)
				.setPropertyCondition(Conditions.isNotNull());
		return modelMapper;
	}

}
package com.blogs.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.blogs.entities.Railway;
import com.blogs.service.RailService;

@RestController
public class RailwayController {

	@Autowired
	RailService service;
	@GetMapping("/")
	public String home()
	{
		return "this is railway backend";
	}
	
	@GetMapping("/railway")
	public ResponseEntity< List<Railway>> getAll()
	{
		List<Railway> list = service.getAll();
		if(!list.isEmpty())
		{
			return new ResponseEntity<List<Railway>>(list, HttpStatus.OK);
		}
		return  new ResponseEntity<List<Railway>>(list, HttpStatus.NO_CONTENT);
	}
	
	@GetMapping("/railway/{id}")
	public ResponseEntity<Railway> getById(@PathVariable Long id)
	{
		Railway rail = service.getById(id);
		if(rail != null)
		{
			return new ResponseEntity<Railway>(rail, HttpStatus.OK);
		}
		return  new ResponseEntity<Railway>(rail, HttpStatus.NO_CONTENT);
	}
	
	@PutMapping("/railway")
	public Railway update(@RequestBody Railway r)
	{
		return service.update( r);
	}
	
	@PostMapping("/railway")
	public String insert(@RequestBody Railway r)
	{
		
		return service.insert(r);
	}
	
	@DeleteMapping("/railway/{id}")
	public Railway delete(@PathVariable Long id)
	{
		
		return service.delete(id);
	}
}
package com.blogs.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.blogs.customexception.RailwayException;
import com.blogs.entities.Railway;
import com.blogs.reposotory.RailwayRepository;

@Service
public class RailServiceImpl implements RailService {

	@Autowired
	private RailwayRepository railwayDao;
	
	@Override
	public List<Railway> getAll() {
	return	railwayDao.findAll();
		
	}

	@Override
	public Railway delete(Long id) {
		Optional<Railway> rail = railwayDao.findById(id);
		railwayDao.delete(rail.get());
		return rail.orElseThrow();
	}

	@Override
	public String insert(Railway railway) {
		railwayDao.save(railway);
		System.out.println(railway);
		return "data inserted";
	}

	@Override
	public Railway update(Railway r) {
		railwayDao.save(r);
		return railwayDao.save(r);
	}

	@Override
	public Railway getById(Long id) {
		Optional<Railway> rail= railwayDao.findById(id);
		return rail.orElseThrow( ()-> new RailwayException("Not Found"));
	}

}
package com.blogs.customexception;

public class RailwayException extends RuntimeException {
public RailwayException(String msg) {
	super(msg);
}
}
#Tomcat server port number 8080
#server.port=7070
#context path default value : empty
#server.servlet.context-path=/ems
server.servlet.session.persistent=false
#DB properties
spring.datasource.url=jdbc:mysql://localhost:3306/blogs2?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=root
# JPA properties
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
#logging.level.org.springframework.orm.hibernate5=DEBUG

# Spring MVC ViewResolver related
#spring.mvc.view.prefix=/WEB-INF/views
#spring.mvc.view.suffix=.jsp
#Disable open session in view 
spring.jpa.open-in-view=false
#property to disable hibernateLazyInitializer during initialized proxies
#spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.7.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.11.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<!-- <version>3.14.0</version> -->
		</dependency>
	</dependencies>
package com.blogs.entities;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
public class Railway {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	Long id;
	String name;
	String destination;
	String source;
	
}
